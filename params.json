{"name":"Cups-filters","tagline":"s","body":"README - OpenPrinting CUPS Filters v1.0.34 - 2013-04-10\r\n-------------------------------------------------------\r\n\r\nLooking for compile instructions?  Read the file \"INSTALL.txt\"\r\ninstead...\r\n\r\n\r\nINTRODUCTION\r\n\r\n    CUPS is a standards-based, open source printing system developed\r\n    by Apple Inc. for Mac OS® X and other UNIX®-like operating\r\n    systems.  CUPS uses the Internet Printing Protocol (\"IPP\") and\r\n    provides System V and Berkeley command-line interfaces, a web\r\n    interface, and a C API to manage printers and print jobs.\r\n\r\n    This distribution contains backends, filters, and other software\r\n    that was once part of the core CUPS distribution but is no longer\r\n    maintained by Apple Inc. In addition it contains additional\r\n    filters and software developed independently of Apple, especially\r\n    filters for the PDF-centric printing workflow introduced by\r\n    OpenPrinting and a daemon to browse Bonjour broadcasts of remote\r\n    CUPS printers and makes these printers available locally.\r\n\r\n    From CUPS 1.6.0 on, this package is required for using printer\r\n    drivers with CUPS under Linux. With CUPS 1.5.x and earlier this\r\n    package can be used optionally to switch over to PDF-based\r\n    printing. In that case some filters are provided by both CUPS and\r\n    this package. Then the filters of this package should be used.\r\n\r\n    For compiling and using this package CUPS, Poppler, libjpeg,\r\n    libpng, libtiff, libijs, freetype, fontconfig, liblcms (liblcms2\r\n    recommended), libavahi-common, and libavahi-client are needed. It\r\n    is highly recommended, especially if non-PostScript printers are\r\n    used, to have Ghostscript, foomatic-filters, and foomatic-db\r\n    installed.\r\n\r\n    CUPS, this package, and Ghostscript contain some rudimentary printer\r\n    drivers, see http://www.openprinting.org/drivers/ for a more\r\n    comprehensive set of printer drivers for Linux.\r\n\r\n    See\r\n\r\n    http://www.linuxfoundation.org/collaborate/workgroups/openprinting/pdf_as_standard_print_job_format\r\n\r\n    for information about the PDF-based printing workflow.\r\n\r\n    Report bugs to\r\n\r\n    https://bugs.linuxfoundation.org/\r\n\r\n    Choose \"OpenPrinting\" as the product and \"cups-filters\" as the component.\r\n\r\n    See the \"LICENSE.txt\" files for legal information.\r\n\r\nIMAGE PRINTING DEFAULT CHANGED TO \"SCALE TO FIT\"\r\n\r\n    Compared to the PostScript-based original CUPS filters there is a\r\n    change of deafults: The imagetopdf and imagetoraster filters print\r\n    in \"scale-to-fit\" mode (image is scaled to fill one page but\r\n    nothing of the image being cut off) by default.\r\n\r\n    This is done to support photo printing via AirPrint. The photo\r\n    apps on Apple's iOS devices send print jobs as JPEG images and do\r\n    not allow to set any options like \"scaling\" or the page size. With\r\n    \"scale-to-fit\" mode set by default, the iOS photos come out on one\r\n    page, as expected.\r\n\r\n    To get back to the old behavior, supply one of the options\r\n    \"nofitplot\" \"filplot=Off\", \"nofit-to-page\", or \"fit-to-page=Off\".\r\n\r\nPOSTSCRIPT PRINTING RENDERER AND RESOLUTION SELECTION\r\n\r\n    If you use CUPS with this package and a PostScript printer then\r\n    the included pdftops filter converts the print job data which is\r\n    in PDF format into PostScript. By default, the PostScript is\r\n    generated with Ghostscript's \"ps2write\" output device, which\r\n    generates a DSC-conforming PostScript with compressed embedded\r\n    fonts and compressed page content. This is resource-saving and\r\n    leads to fast wire transfer of print jobs to the printer.\r\n\r\n    Unfortunately, Ghostscript's PostScript output is not compatible\r\n    with some printers due to interpreter bugs in the printer and in\r\n    addition, processing (by Ghostscript or by the printer's\r\n    interpreter) can get very slow with high printing resolutions when\r\n    parts of the incoming PDF file are converted to bitmaps if they\r\n    contain graphical structures which are not supported by\r\n    PostScript. The bitmap problem especially occurs on input files\r\n    with transparency, especially also the ones produced by Cairo\r\n    (evince and many other GNOME/GTK applications) which unnecessarily\r\n    introduces transparency even if the input PDF has no transparency.\r\n\r\n    Therefore there are two possibilities to configure pdftops at\r\n    runtime:\r\n\r\n    1. Selection of the renderer: Ghostscript, Poppler, or Adobe Reader\r\n\r\n    Ghostscript has better color management and is generally optimized\r\n    more for printing. Poppler produces a PostScript which is\r\n    compatible with more buggy built-in PostScript interpreters of\r\n    printers and it leads to a somewhat quicker workflow when\r\n    graphical structures of the input PDF has to be turned into\r\n    bitmaps. Adobe Reader is the PDF renderer from Adobe, the ones\r\n    who created PDF and PostScript.\r\n\r\n    The selection is done by the \"pdftops-renderer\" option, setting it\r\n    to \"gs\", \"pdftops\", or \"acroread\":\r\n\r\n    Per-job:           lpr -o pdftops-renderer=pdftops ...\r\n    Per-queue default: lpadmin -p printer -o pdftops-renderer-default=gs\r\n    Remove default:    lpadmin -p printer -R pdftops-renderer-default\r\n\r\n    By default, pdftops uses Ghostscript if this does not get changed\r\n    at compile time, for example by the Linux distribution vendor.\r\n\r\n    2. Limitation of the image rendering resolution\r\n\r\n    If graphical structures of the incoming PDF file have to be\r\n    converted to bitmaps due to limitations of PostScript, the\r\n    conversion of the file by pdftops or the rendering by the printer\r\n    can get too slow if the bitmap resolution is too high or the\r\n    printout quality can degrade if the bitmap resolution is too low.\r\n\r\n    By default, pdftops tries to find out the actual printing\r\n    resolution and sets the resolution for bitmap generation to the\r\n    same value. If it cannot find the printing resolution, it uses 300\r\n    dpi. It never goes higher than a limit of 1440 dpi. Note that this\r\n    default limit can get changed at compile time, for example by the\r\n    Linux distribution vendor.\r\n\r\n    The resolution limit for bitmaps can be changed to a lower or\r\n    higher value, or be set to unlimited. This is done by the option\r\n    \"pdftops-max-image-resolution\", setting it to the desired value\r\n    (in dpi) or to zero for unlimited. It can be used per-job or as\r\n    per-queue default as the \"pdftops-renderer\" option described\r\n    above.\r\n\r\n    The \"pdftops-max-image-resolution\" option is ignored when Adobe\r\n    Reader is selected as PDF renderer.\r\n\r\nPOSTSCRIPT PRINTING DEBUG MODE\r\n\r\n    Sometimes a PostScript printer's interpreter errors, crashes, or\r\n    somehow else misbehaves on Ghostscript's output. To find\r\n    workarounds (currently we have already workarounds for Brother and\r\n    Kyocera) it is much easier to work with uncompressed PostScript.\r\n    To get uncompressed PostScript as output, send a job with the\r\n    \"psdebug\" option, with commands like the following:\r\n\r\n      lpr -P <printer> -o psdebug <file>\r\n      lp -d <printer> -o psdebug <file>\r\n\r\n    If you want to send your job out of a desktop application, run\r\n\r\n      lpoptions -p <printer> -o psdebug\r\n\r\n    to make \"psdebug\" a personal default setting for you.\r\n\r\n    To extract the PostScript output for a developer to analyse it,\r\n    clone your print queue to a one which prints into a file:\r\n\r\n      cupsctl FileDevice=yes\r\n      lpadmin -p test -E -v file:/tmp/printout \\\r\n      -P /etc/cups/ppd/<name of original queue>.ppd\r\n\r\n    and print into this queue as described above. The PostScript\r\n    output is in /tmp/printout after the job has completed.\r\n\r\n    This option does not change anything if Poppler's pdftops is used\r\n    as renderer.\r\n\r\nHELPER DAEMON FOR BROWSING REMOTE CUPS PRINTERS\r\n\r\n    From version 1.6.0 on in CUPS the CUPS broadcasting/browsing\r\n    facility was dropped, in favour of Bonjour-based broadcasting of\r\n    shared printers. This is done as Bonjour broadcasting of shared\r\n    printers is a standard, established by the PWG (Printing Working\r\n    Group, http://www.pwg.org/), and most other network services\r\n    (shared file systems, shared media files/streams, remote desktop\r\n    services, ...) are also broadcasted via Bonjour.\r\n\r\n    Problem is that CUPS only broadcasts its shared printers but does\r\n    not browse broadcasts of other CUPS servers to make the shared\r\n    remote printers available locally without any configuration\r\n    efforts. This is a regression compared to the old CUPS\r\n    broadcasting/browsing. The intention of CUPS upstream is that the\r\n    application's print dialogs browse the Bonjour broadcasts as an\r\n    AirPrint-capable iPhone does, but it will take its time until all\r\n    toolkit developers add the needed functionality, and programs\r\n    using old toolkits or no toolkits at all, or the command line stay\r\n    uncovered.\r\n\r\n    The solution is cups-browsed, a helper daemon running in parallel\r\n    to the CUPS daemon which listens to Bonjour broadcasts of shared\r\n    CUPS printers on remote machines in the local network via Avahi,\r\n    and can also listen for (and send) CUPS Browsing broadcasts. For\r\n    each reported remote printer it creates a local raw queue pointing\r\n    to the remote printer so that the printer appears in local print\r\n    dialogs and is also available for printing via the command\r\n    line. As with the former CUPS broadcasting/browsing with this\r\n    queue the driver on the server is used and the local print dialogs\r\n    give access to all options of the server-side printer driver.\r\n\r\n    Note that CUPS broadcasting/browsing is available for legacy\r\n    support, to let the local CUPS daemon work seamlessly together\r\n    with remote CUPS daemons of version 1.5.x and older which only\r\n    support CUPS broadcasting/browsing. In networks with only CUPS\r\n    1.6.x servers (or Ubuntu or Fedora/Red Hat servers with CUPS\r\n    1.5.x) please use the native Bonjour broadcasting of your servers\r\n    and cups-browsed, configured for Bonjour browsing only on the\r\n    clients.\r\n\r\n    Also high availability with redundant print servers is\r\n    supported. If there is more than one server providing a shared\r\n    print queue with the same name, cups-browsed uses the first queue\r\n    which appeared and if this queue disappears, cups-browsed\r\n    seamlessly switches to the queue of another server. Unfortunately,\r\n    load-balancing (what CUPS did via implicit classes) is not\r\n    possible with cups-browsed.\r\n\r\n    For maximum security cups-browsed uses IPPS (encrypted IPP)\r\n    whenever possible.\r\n\r\n    The configuration file for cups-browsed is\r\n    /etc/cups/cups-browsed.conf.  This file can include limited forms\r\n    of the original CUPS BrowseRemoteProtocols, BrowseLocalProtocols,\r\n    BrowsePoll, and BrowseAllow directives.\r\n\r\n    The \"make install\" process installs init scripts which make the\r\n    daemon automatically started during boot. You can also manually\r\n    start it with (as root):\r\n\r\n    /usr/sbin/cups-browsed &\r\n\r\n    or in debug mode with\r\n\r\n    /usr/sbin/cups-browsed --debug\r\n\r\n    Shut it down by sending signal 2 (SIGINT) or 15 (SIGTERM) to\r\n    it. The queues which it has created get removed then (except a\r\n    queue set as system default, to not loose its system default\r\n    state).\r\n\r\n    Here is some info on how cups-browsed works internally )first concept of a\r\n    daemon which does only Bonjour browsing):\r\n\r\n    - Daemon start\r\n      o Wait for CUPS daemon if it is not running\r\n      o Read out all CUPS queues created by this daemon (in former sessions)\r\n      o Mark them unconfirmed and set timeout 10 sec from now\r\n    - Main loop (use avahi_simple_poll_iterate() to do queue list maintenance\r\n                 regularly)\r\n      o Event: New printer shows up\r\n        + Queue for printer is already created by this daemon -> Mark list\r\n          entry confirmed, if discovered printer is ipps but existing queue ipp,\r\n\t  upgrade existing queue by setting URI to ipps. Set status to\r\n\t  to-be-created and timeout to now-1 sec to make the CUPS queue be\r\n\t  updated.\r\n        + Queue does not yet exist -> Mark as to-be-created and set\r\n\t  timeout to now-1 sec.\r\n      o Event: A printer disappears\r\n        + If we have listed a queue for it, mark the entry as disappeared, set\r\n          timeout to now-1 sec\r\n      o On any of the above events and every 2 sec\r\n        + Check through list of our listed queues\r\n          - If queue is unconfirmed and timeout has passed, mark it as\r\n            disappeared, set timeout to now-1 sec\r\n          - If queue is marked disappered and timeout has passed, check whether\r\n\t    there are still jobs in it, if yes, set timeout to 10 sec from now,\r\n\t    if no, remove the CUPS queue and the queue entry in our list. If\r\n\t    removal fails, set timeout to 10 sec.\r\n\t  - If queue is to-be-created, create it, if succeeded set to\r\n\t    confirmed, if not, set timeout to 10 sec fron now. printer-is-shared\r\n\t    must be set to false.\r\n    - Daemon shutdown\r\n      o Remove all CUPS queues in our list, as long as they do not have jobs.\r\n\r\n    Do not overwrite existing queues which are not created by us If\r\n    the simple <remote_printer> name is already taken, try to create a\r\n    <remote_printer>@<server> name, if this is also taken, ignore the\r\n    remote printer. Do not retry, to avoid polling CUPS all the time.\r\n\r\n    Do not remove queues which are not created by us. We do this by\r\n    listing only our queues and remove only listed queues.\r\n\r\n    Queue names: Use the name of the remote queue. If a queue with the\r\n    same name from another server already exists, mark the new queue\r\n    as duplicate and when a queue disappears, check whether it has\r\n    duplicates and change the URI of the disappeared queue to the URI\r\n    of the first duplicate, mark the queue as to-be-created with\r\n    timeout now-1 sec (to update the URI of the CUPS queue) and mark\r\n    the duplicate ddisappeared with timeout now-1 sec. In terms of\r\n    high availability we replace the old load balancing of the\r\n    implicit class by a failover solution. Alternatively (not\r\n    implemented), if queue with same name but from other server\r\n    appears, create new queue as <original name>@<server name without\r\n    .local>. When queue with simple name is removed, replace the first\r\n    of the others by one with simple name (mark old queue disappeared\r\n    with timeout now-1 sec and create new queue with simple name).\r\n\r\n    Fill description of the created CUPS queue with the Bonjour\r\n    service name (= original description) and location with the server\r\n    name without .local.\r\n\r\n    stderr messages only in debug mode (command line options:\r\n    \"--debug\" or \"-d\" or \"-v\").\r\n\r\n    Queue identified as from this daemon by doing the equivalent of\r\n    \"lpadmin -p printer -o cups-browsed-default\", this generates a\r\n    \"cups-browsed\" attribute in printers.conf with value \"true\".\r\n\r\nCUPS FILTERS FOR PDF AS STANDARD PRINT JOB FORMAT\r\n\r\n    Here is documentation from the former CUPS add-on tarball with the filters\r\n    for the PDF-based printing workflow: imagetopdf, texttopdf,\r\n    pdftopdf, pdftoraster, pdftoopvp, and pdftoijs\r\n\r\n    The original filters are from http://sourceforge.jp/projects/opfc/\r\n\r\n    NOTE: the texttops and imagetops filters shipping with this package\r\n    are simple wrapper scripts for backward compatibility with third-party\r\n    PPD files and custom configurations. There are not referred to in the\r\n    cupsfilters.convs file and therefore not used by the default\r\n    configuration. Direct conversion of text or images to PostScript is\r\n    deprecated in the PDF-based printing workflow. So do not use these\r\n    filters when creating new PPDs or custom configurations. The parameters\r\n    for these filters are the same as for texttopdf and imagetopdf (see\r\n    below) as the ...tops filter calls the ....topdf filter plus\r\n    Ghostscript's pdf2ps.\r\n\r\nIMAGETOPDF\r\n\r\n1. INTRODUCTION\r\n\r\nThis program is \"imagetopdf\". \"imagetopdf\" is a CUPS filter which reads\r\na single image file, converts it into a PDF file and outputs it to stdout.\r\n\r\nThis program accepts the following image file format;\r\n\r\n  gif, png, jpeg, tiff, photocd, portable-anymap, portable-bitmap,\r\n  portable-graymap, portable-pixmap, sgi-rgb, sun-raster, xbitmap,\r\n  xpixmap, xwindowdump\r\n\r\nxbitmap, xpixmap and xwindowdump images are converted into png images by\r\nthe \"convert\" command. Other kinds of image file format can be supported\r\nif the \"convert\" command support them.\r\n\r\nOutput PDF file format conforms to PDF version 1.3 specification, and\r\ninput image is converted and contained in the output PDF file as a binary\r\nformat non-compression image.\r\n\r\n\"imagetopdf\" may outputs multiple pages if the input image exceeds page\r\nprintable area.\r\n\r\n2. LICENSE\r\n\r\n\"imagetopdf.c\" is under the CUPS license. See the \"LICENSE.txt\" file.\r\nFor other files, see the copyright notice and license of each file.\r\n\r\n3. COMMAND LINE\r\n\r\n\"imagetopdf\" is a CUPS filter, and the command line arguments, environment\r\nvariables and configuration files are in accordance with the CUPS filter\r\ninterface.\r\n\r\nimagetopdf <job> <user> <title> <num-copies> <options> [<filename>]\r\n\r\n\"imagetopdf\" ignores <job> and <user>.\r\n<title> is appended into the PDF dictionary as /Title.\r\n<num-copies> specifies the number of document copies.\r\n<options> is a CUPS option list.\r\n<filename> is an input image file name.\r\n\r\nWhen omit the <filename>, \"imagetopdf\" reads an image file from stdin.\r\n\r\n4. ENVIRONMENT VARIABLES\r\n\r\nThis program refers the following environment variable;\r\n\r\n   PPD:  PPD file name of the printer.\r\n\r\n5. COMMAND OPTIONS\r\n\r\n\"imagetopdf\" accepts the following CUPS standard options;\r\n\r\nfitplot\r\nmirror\r\nPageSize\r\npage-left, page-right, page-bottom, page-top\r\nOutputOrder\r\nCollate\r\nsides\r\ncupsEvenDuplex\r\nposition\r\nscaling\r\nppi\r\nnatural-scaling\r\nlandscape\r\norientation-requested\r\n\r\nSee the CUPS documents for details of these options.\r\n\r\n6. KNOWN PROBLEMS\r\n\r\nProblem:\r\n  PBM and SUN raster images can not be printed.\r\nSolution:\r\n  Due to the CUPS libcupsimage library's bug. Update the CUPS on your system.\r\n  \r\n7. INFORMATION FOR DEVELOPERS\r\n\r\nFollowing information is for developers, not for driver users.\r\n\r\n7.1 Options handled by a printer or \"imagetopdf\"\r\n\r\nFollowing options are handled by a printer or \"imagetopdf\".\r\n  Collate, Copies, Duplex, OutputOrder\r\n\r\nWhich handles these options depends on following options and attributes.\r\n  Collate, Copies, Duplex, OutputOrder, cupsEvenDuplex, cupsManualCopies\r\n\r\n\"imagetopdf\" judges whether a printer can handle these options according to\r\nthe followings option settings in a PPD file.\r\n\r\nCollate:\r\n  If Collate is defined, \"imagetopdf\" judges the printer supports Collate.\r\nCopies:\r\n  If cupsManualCopies is defined as False, \"imagetopdf\" judges the printer\r\n  does not support Copies feature.\r\n　\r\nDuplex:\r\n  If Duplex is defined, \"imagetopdf\" judges the printer supports Duplex.\r\n  If cupsEvenDuplex is True, Number of pages must be even.\r\nOutputOrder:\r\n  If OutputOrder is defined, \"imagetopdf\" judges the printer supports\r\n  OutputOrder.\r\n\r\nIf the printer cannot handle these options, \"imagetopdf\" handles it.\r\n\r\nFollowing pseudo program describes how \"imagetopdf\" judges to handle\r\nthese options.\r\n\r\nVariables\r\n\r\nCopies : specified Copies\r\nDuplex : specified Duplex \r\nCollate : specified Collate\r\nOutputOrder : specified OutputOrder\r\nEvenDuplex : specified cupsEvenDuplex\r\npages : number of pages\r\nnumber_up : specified number-up\r\n\r\ndevice_copies : Copies passed to the printer\r\ndevice_duplex : Duplex passed to the printer\r\ndevice_collate : Collate passed to the printer\r\ndevice_outputorder : OutputOrder passed to the printer\r\n\r\nsoft_copies : copies by imagetopdf\r\n\r\n\r\ndevice_copies = 1;\r\ndevice_duplex = False;\r\ndevice_collate = False;\r\ndevice_outputorder = False;\r\n\r\nif (Copies == 1) {\r\n  /* Collate is not needed. */\r\n  Collate = False;\r\n}\r\n\r\nif (!Duplex) {\r\n  /* EvenDuplex is not needed */\r\n  EvenDuplex = False;\r\n}\r\n\r\n\r\nif (Copies > 1 && the printer can handle Copies) device_copies = Copies;\r\nif (Duplex && the printer can handle Duplex) {\r\n       device_duplex = True;\r\n} else {\r\n   /* imagetopdf cannot handle Duplex */\r\n}\r\nif (Collate && the printer can handle Collate) device_collate = True;\r\nif (OutputOrder == Reverse && the printer can handle OutputOrder)\r\n             device_outputorder = True;\r\n\r\nif (Collate && !device_collate) {\r\n   /* The printer cannot handle Collate.\r\n      So imagetopdf handle Copies */\r\n              device_copies = 1;\r\n}\r\n\r\nif (device_copies != Copies /* imagetopdf handle Copies */ && Duplex)\r\n    /* Make imagetopdf handle Collate, otherwise both paper side may have\r\n       same page */\r\n              Collate = True;\r\n              device_collate = False;\r\n}\r\n\r\nif (Duplex && Collate && !device_collate) {\r\n   /* Handle EvenDuplex, otherwise the last page has\r\n      the next copy's first page in the other side of the paper. */\r\n   EvenDuplex = True;\r\n}\r\n\r\nif (Duplex && OutputOrder == Reverse && !device_outputorder) {\r\n   /* Handle EvenDuplex, otherwise the first page's other side of paper\r\n      is empty. */\r\n   EvenDuplex = True;\r\n}\r\n\r\nsoft_copies = device_copies > 1 ? 1 : Copies;\r\n\r\n7.2 JCL\r\n\r\nWhen you print PDF files to a PostScript(PS) printer, you can specify\r\ndevice options in PS. In this case, you can write PS commands in a PPD file\r\nlike as follows.\r\n\r\n*OpenUI *Resolution/Resolution : PickOne\r\n*DefaultResolution: 600\r\n*Resolution 300/300 dpi: \"<</HWResolution[300 300]>>setpagedevice\"\r\n*Resolution 600/600 dpi: \"<</HWResolution[600 600]>>setpagedevice\"\r\n*CloseUI: *Resolution\r\n\r\nHowever, if options cannot be described in PS file, you can write JCLs\r\nas follows;\r\n\r\n*JCLOpenUI *JCLFrameBufferSize/Frame Buffer Size: PickOne\r\n*DefaultJCLFrameBufferSize: Letter\r\n*OrderDependency: 20 JCLSetup *JCLFrameBufferSize\r\n*JCLFrameBufferSize Off: '@PJL SET PAGEPROTECT = OFF<0A>'\r\n*JCLFrameBufferSize Letter: '@PJL SET PAGEPROTECT = LTR<0A>'\r\n*JCLFrameBufferSize Legal: '@PJL SET PAGEPROTECT = LGL<0A>'\r\n*JCLCloseUI: *JCLFrameBufferSize\r\n\r\nBecause PDF cannot specify device options in a PDF file, you have to define\r\nall the device options as JCLs.\r\n\r\nWhen a printer does not support PS nor PDF, you can use Ghostscript (GS).\r\nIn this case, you can specify device options like a PS printer.\r\nIf you want to use the same printer and same PPD file for both PDF and PS\r\nprinting, when you print a PS file, you can specify that GS handles it,\r\nand when you print a PDF file, you can also specify that PDF filters handle\r\nit in the same PPD file. However in this case, previous methods is not\r\nappropriate to specify device options.\r\n\r\nSo, \"imagetopdf\" handles this case as follows;\r\n(In following pseudo program, JCL option is an option specified with JCLOpenUI)\r\n\r\nif (Both JCLBegin and JCLToPSInterpreter are specified in the PPD file) {\r\n    output JCLs that marked JCL options.\r\n}\r\n\r\nif (pdftopdfJCLBegin attribute is specified in the PPD file) {\r\n    output it's value\r\n}\r\n\r\nif (Copies option is specified in the PPD file) {\r\n    mark Number of copies specified\r\n} else if (pdftopdfJCLCopies is specified in the PPD file) {\r\n    output JCL specified with JCLCopies\r\n}\r\n\r\nfor (each marked options) {\r\n    if (pdftopdfJCL<marked option's name> is specified in the PPD file) {\r\n\toutput it's value as a JCL\r\n    } else if (pdftopdfJCLBegin attributes is specified in the PPD file) {\r\n\toutput \"<option's name>=<marked choice>;\" as a JCL\r\n    }\r\n}\r\noutput NEWLINE\r\n\r\nThus, if you want to use both PDF filters and GS by single PPD file,\r\nwhat you should do is to add the following line in the PPD file;\r\n\r\n*pdftopdfJCLBegin: \"pdftoopvp jobInfo:\"\r\n\r\nNote:\r\n  If you specify JCLBegin, you have to specify JCLToPSInterpreter as well.\r\n\r\nNote:\r\n  When you need to specify the value which is different from the choosen\r\n  value based on the PPD into the jobInfo, you have to specify the values\r\n  with the key started by \"pdftopdfJCL\" string.\r\n\r\n  For example, if the page size is defined in a PPD file as following;\r\n\r\n  *OpenUI *PageSize/Page Size: PickOne\r\n  *DefaultPageSize: A4\r\n  *PageSize A4/A4:\r\n  *PageSize Letter/US Letter:\r\n  *CloseUI: *PageSize\r\n\r\n  if you choose the page size \"Letter\", the string \"PageSize=Letter;\" is\r\n  added to jobInfo. On the other hand, if the driver requires the different\r\n  value for the \"Letter\" size, for instance driver requires \"PS=LT;\"\r\n  instead of \"PageSize=Letter;\" as the jobInfo value, the PPD file has to\r\n  be defined as following;\r\n\r\n  *OpenUI *PageSize/Page Size: PickOne\r\n  *DefaultPageSize: A4\r\n  *PageSize A4/A4:\r\n  *pdftopdfJCLPageSize A4/A4: \"PS=A4;\"\r\n  *PageSize Letter/US Letter:\r\n  *pdftopdfJCLPageSize Letter/US Letter: \"PS=LT;\"\r\n  *CloseUI: *PageSize\r\n\r\n7.3 Temporally files location\r\n\r\n\"imagetopdf\" creates temporally files if needed. Temporary files are created\r\nin the location specified by TMPDIR environment variable. Default location\r\nis \"/tmp\".\r\n\r\n\r\nPDFTOPDF.OLD\r\n\r\n0. DEPRECATION NOTICE\r\nThis filter is being replaced by a new implementation that does not\r\ndepend on poppler. Therefore it has been renamed \"pdftopdf.old\",\r\nbut the references in the following sections have not been updated.\r\n\r\n1. INTRODUCTION\r\n\r\nThere are two executable programs, \"pdftopdf\" and \"pdf2pdf\", in this package.\r\n\"pdftopdf\" is a filter for CUPS. It reads PDF files, changes page layout\r\nand output a new PDF file. \"pdf2pdf\" is a user command version of \"pdftopdf\".\r\nThis document describes about only \"pdftopdf\". See man/pdf2pdf.1 for \"pdf2pdf\".\r\n\r\nWhen a input PDF file which is given to \"pdftopdf\" does not include some\r\nrequired fonts, and if you set the font embedding option, \"pdftopdf\" embed\r\nfonts in the new PDF file \r\n\r\n\"pdftopdf\" finds fonts to embed by fontconfig library.\r\n\"pdftopdf\" now embed only TrueType format fonts.\r\nPDF Standard fonts are not embedded.\r\n\r\nNote: Do not embed fonts that the font licenses inhibit embedding.\r\n\r\n\"pdftopdf\" does not support functions that are not related to printing\r\nfeatures, including interactive features and document interchange features.\r\nMany of these operators and sections are just ignored.\r\nSome of these may be output, but those functions are not assured.\r\nEncryption feature is not supported.\r\n\r\n2. NATIVE PDF PRINTER SUPPORT\r\n\r\npdftopdf introduces native PDF printer support to CUPS for the first\r\ntime. PPD files must have a line\r\n\r\n*cupsFilter: \"application/vnd.cups-pdf 0 -\"\r\n\r\nand use the \"*JCLToPDFInterpreter:\" keyword, for example:\r\n\r\n*JCLBegin:           \"<1B>%-12345X@PJL JOB<0A>\"\r\n*JCLToPDFInterpreter: \"@PJL ENTER LANGUAGE = PDF <0A>\"\r\n*JCLEnd:             \"<1B>%-12345X@PJL EOJ <0A><1B>%-12345X\"\r\n\r\nThey MUST NOT accept PostScript as input data format and will not work\r\nwith stock CUPS. They will need cups-filters (which implements the PDF-\r\nbased printing workflow) to work.\r\n\r\nOptions must not be implemented by specifying PostScript code to\r\ninject.  They must be injecting JCL code (\"*JCLOpenUI:\r\n... ... *JCLCloseUI: ...\").\r\n\r\nA sample PPD file, HP-Color_LaserJet_CM3530_MFP-PDF.ppd is included.\r\n\r\n3. LICENSE\r\n\r\nAlmost all source files are under MIT like license. However,\r\n\"pdftopdf\" links some \"poppler\" libraries, and these files are under\r\nGNU public license.  See copyright notice of each file for details.\r\n\r\n4. COMMAND LINE\r\n\r\n\"pdftopdf\" is a CUPS filter, and the command line arguments, environment\r\nvariables and configuration files are in accordance with the CUPS filter\r\ninterface.\r\n\r\npdftopdf <job> <user> <title> <num-copies> <options> [<filename>]\r\n\r\n\"pdftopdf\" ignores <job> and <user>.\r\n<title> is appended into the PDF dictionary as /Title.\r\n<num-copies> specifies the number of document copies.\r\n<options> is a CUPS option list.\r\n<filename> is an input PDF file name.\r\n\r\nWhen omit the <filename>, \"pdftopdf\" reads a PDF file from stdin,\r\nand save it as a temporary file.\r\n\r\n\r\nCUPS options defined in <options> are delimited by space. Boolean\r\ntype CUPS option is defined only by the option key, and other type\r\nCUPS option are defined by pairs of key and value, <key>=<value>.\r\n\r\n5. COMMAND OPTIONS\r\n\r\n\"pdftopdf\" accepts the following CUPS standard options;\r\n\r\nfiplot\r\nmirror\r\nPageSize\r\npage-left, page-right, page-bottom, page-top\r\nnumber-up\r\nnumber-up-layout\r\npage-border\r\nOutputOrder\r\npage-set\r\npage-ranges\r\nCollate\r\nsides\r\ncupsEvenDuplex\r\n\r\nSee the CUPS documents for details of these options.\r\n\r\nMargin given by the page-left, page-right, page-bottom and page-top is\r\nvalid when fiplot or number-up option is set.\r\n\r\n\"pdftopdf\" accepts the following original options;\r\n\r\npdftopdfFontEmbedding\r\n  Boolean option.\r\n  Force \"pdftopdf\" to embed fonts. \"pdftopdf\" does not embed fonts by default.\r\n\r\npdftopdfFontEmbeddingWhole\r\n  Boolean option.\r\n  Force \"pdftopdf\" to embed whole fonts.\r\n  \"pdftopdf\" does not embed whole fonts by default.\r\n  If this option is false, \"pdftopdf\" embed subset of the fonts.\r\n  This option is valid only when the pdftopdfFontEmbedding option is true.\r\n\r\npdftopdfFontEmbeddingPreLoad\r\n  Boolean option.\r\n  Force \"pdftopdf\" to embed fonts specified as pre-loaded fonts in a PPD file.\r\n  \"pdftopdf\" does not embed pre-loaded fonts by default.\r\n  If this option is false, pdftopdf does not embed pre-loaded fonts.\r\n  This option is valid only when the pdftopdfFontEmbedding option is true.\r\n\r\npdftopdfFontCompress\r\n  Boolean option.\r\n  Force \"pdftopdf\" to compress embed fonts.\r\n  \"pdftopdf\" does not compress embed fonts by default.\r\n  This option is valid only when the pdftopdfFontEmbedding option is true.\r\n\r\npdftopdfContentsCompress\r\n  Boolean option.\r\n  Force \"pdftopdf\" to compress page contents.\r\n  \"pdftopdf\" does not compress page contents by default.\r\n\r\npdftopdfJCLBegin\r\n  Boolean option.\r\n  Force \"pdftopdf\" to create JCL info for the following PDF filter\r\n  \"pdftoopvp\".\r\n\r\n6. INFORMATION FOR DEVELOPERS\r\n\r\nFollowing information is for developers, not for driver users.\r\n\r\n6.1 Options handled by a printer or \"pdftopdf\"\r\n\r\nFollowing options are handled by a printer or \"pdftopdf\".\r\n  Collate, Copies, Duplex, OutputOrder\r\n\r\nWhich handles these options depends on following options and attributes.\r\n  Collate, Copies, Duplex, OutputOrder, cupsEvenDuplex, cupsManualCopies\r\n\r\n\"pdftopdf\" judges whether a printer can handle these options according to\r\nthe followings option settings in a PPD file.\r\n\r\nCollate:\r\n  If Collate is defined, \"pdftopdf\" judges the printer supports Collate.\r\nCopies:\r\n  If cupsManualCopies is defined as False, \"pdftopdf\" judges the printer\r\n  does not support Copies feature.\r\nDuplex:\r\n  If Duplex is defined, \"pdftopdf\" judges the printer supports Duplex.\r\n  If cupsEvenDuplex is True, Number of pages must be even.\r\nOutputOrder:\r\n  If OutputOrder is defined, \"pdftopdf\" judges the printer supports\r\n  OutputOrder.\r\n\r\nIf the printer cannot handle these options, \"pdftopdf\" handles it.\r\n\r\nFollowing pseudo program describes how \"pdftopdf\" judges to handle\r\nthese options.\r\n\r\nVariables\r\n\r\nCopies : specified Copies\r\nDuplex : specified Duplex \r\nCollate : specified Collate\r\nOutputOrder : specified OutputOrder\r\nEvenDuplex : specified cupsEvenDuplex\r\npages : number of pages\r\nnumber_up : specified number-up\r\n\r\ndevice_copies : Copies passed to the printer\r\ndevice_duplex : Duplex passed to the printer\r\ndevice_collate : Collate passed to the printer\r\ndevice_outputorder : OutputOrder passed to the printer\r\n\r\nsoft_copies : copies by pdftopdf\r\n\r\n\r\ndevice_copies = 1;\r\ndevice_duplex = False;\r\ndevice_collate = False;\r\ndevice_outputorder = False;\r\n\r\nif (Copies == 1) {\r\n  /* Collate is not needed. */\r\n  Collate = False;\r\n}\r\n\r\nif (!Duplex) {\r\n  /* EvenDuplex is not needed */\r\n  EvenDuplex = False;\r\n}\r\n\r\n\r\nif (Copies > 1 && the printer can handle Copies) device_copies = Copies;\r\nif (Duplex && the printer can handle Duplex) {\r\n       device_duplex = True;\r\n} else {\r\n   /* pdftopdf cannot handle Duplex */\r\n}\r\nif (Collate && the printer can handle Collate) device_collate = True;\r\nif (OutputOrder == Reverse && the printer can handle OutputOrder)\r\n             device_outputorder = True;\r\n\r\nif (Collate && !device_collate) {\r\n   /* The printer cannot handle Collate.\r\n      So pdftopdf handle Copies */\r\n              device_copies = 1;\r\n}\r\n\r\nif (device_copies != Copies /* pdftopdf handle Copies */ && Duplex)\r\n    /* Make pdftopdf handle Collate, otherwise both paper side may have\r\n       same page */\r\n              Collate = True;\r\n              device_collate = False;\r\n}\r\n\r\nif (Duplex && Collate && !device_collate) {\r\n   /* Handle EvenDuplex, otherwise the last page has\r\n      the next copy's first page in the other side of the paper. */\r\n   EvenDuplex = True;\r\n}\r\n\r\nif (Duplex && OutputOrder == Reverse && !device_outputorder) {\r\n   /* Handle EvenDuplex, otherwise the first page's other side of paper\r\n      is empty. */\r\n   EvenDuplex = True;\r\n}\r\n\r\nsoft_copies = device_copies > 1 ? 1 : Copies;\r\n\r\n6.2 JCL\r\n\r\nWhen you print PDF files to a PostScript(PS) printer, you can specify\r\ndevice options in PS. In this case, you can write PS commands in a PPD file\r\nlike as follows.\r\n\r\n*OpenUI *Resolution/Resolution : PickOne\r\n*DefaultResolution: 600\r\n*Resolution 300/300 dpi: \"<</HWResolution[300 300]>>setpagedevice\"\r\n*Resolution 600/600 dpi: \"<</HWResolution[600 600]>>setpagedevice\"\r\n*CloseUI: *Resolution\r\n\r\nHowever, if options cannot be described in PS file, you can write JCLs\r\nas follows;\r\n\r\n*JCLOpenUI *JCLFrameBufferSize/Frame Buffer Size: PickOne\r\n*DefaultJCLFrameBufferSize: Letter\r\n*OrderDependency: 20 JCLSetup *JCLFrameBufferSize\r\n*JCLFrameBufferSize Off: '@PJL SET PAGEPROTECT = OFF<0A>'\r\n*JCLFrameBufferSize Letter: '@PJL SET PAGEPROTECT = LTR<0A>'\r\n*JCLFrameBufferSize Legal: '@PJL SET PAGEPROTECT = LGL<0A>'\r\n*JCLCloseUI: *JCLFrameBufferSize\r\n\r\nFor PostScript printers all these options are handled by the pdftops\r\nfilter which is the PostScript printer driver in the PDF-based\r\nprinting workflow.\r\n\r\nIf you have a native PDF printer you cannot use options which inject\r\nPostScript code into the data stream, you have to define all options\r\nwith JCL. Only in this case pdftopdf adds the JCL header and trailer\r\nto the PDF job. Native PDF PPDs with JCL options are recognized by the\r\n\"*JCLToPDFInterpreter:\" keyword, for example with the following lines:\r\n\r\n*JCLBegin:           \"<1B>%-12345X@PJL JOB<0A>\"\r\n*JCLToPDFInterpreter: \"@PJL ENTER LANGUAGE = PDF <0A>\"\r\n*JCLEnd:             \"<1B>%-12345X@PJL EOJ <0A><1B>%-12345X\"\r\n\r\nTo get the correct CUPS filter chain for them, they need the following\r\nline:\r\n\r\n*cupsFilter: \"application/vnd.cups-pdf 0 -\"\r\n\r\nand NO \"*cupsFilter:\" line which accepts PostScript input.\r\n\r\nA sample PPD file for a native PDF printer,\r\nHP-Color_LaserJet_CM3530_MFP-PDF.ppd is included.\r\n\r\nWhen a printer does not support PS nor PDF, you can use Ghostscript (GS).\r\nIn this case, you can specify device options like a PS printer.\r\nIf you want to use the same printer and same PPD file for both PDF and PS\r\nprinting, when you print a PS file, you can specify that GS handles it,\r\nand when you print a PDF file, you can also specify that PDF filters handle\r\nit in the same PPD file. However in this case, previous methods is not\r\nappropriate to specify device options.\r\n\r\nSo, \"pdftopdf\" handles this case as follows;\r\n(In following pseudo program, JCL option is a option specified with JCLOpenUI)\r\n\r\nif (Both JCLBegin and JCLToPDFInterpreter are specified in the PPD file) {\r\n    output JCLs that marked JCL options.\r\n}\r\n\r\nif (pdftopdfJCLBegin attribute is specified in the PPD file) {\r\n    output it's value\r\n}\r\n\r\nif (Copies option is specified in the PPD file) {\r\n    mark Number of copies specified\r\n} else if (pdftopdfJCLCopies is specified in the PPD file) {\r\n    output JCL specified with JCLCopies\r\n}\r\n\r\nfor (each marked options) {\r\n    if (pdftopdfJCL<marked option's name> is specified in the PPD file) {\r\n\toutput it's value as a JCL\r\n    } else if (pdftopdfJCLBegin attributes is specified in the PPD file) {\r\n\toutput \"<option's name>=<marked choice>;\" as a JCL\r\n    }\r\n}\r\noutput NEWLINE\r\n\r\nThus, if you want to use both PDF filters and GS by single PPD file,\r\nwhat you should do is to add the following line in the PPD file;\r\n\r\n*pdftopdfJCLBegin: \"pdftoopvp jobInfo:\"\r\n\r\nNote:\r\n  If you specify JCLBegin, you have to specify JCLToPDFInterpreter as well.\r\n\r\nNote:\r\n  When you need to specify the value which is different from the choosen\r\n  value based on the PPD into the jobInfo, you have to specify the values\r\n  with the key started by \"pdftopdfJCL\" string.\r\n\r\n  For example, if the page size is defined in a PPD file as following;\r\n\r\n  *OpenUI *PageSize/Page Size: PickOne\r\n  *DefaultPageSize: A4\r\n  *PageSize A4/A4:\r\n  *PageSize Letter/US Letter:\r\n  *CloseUI: *PageSize\r\n\r\n  if you choose the page size \"Letter\", the string \"PageSize=Letter;\" is\r\n  added to jobInfo. On the other hand, if the driver requires the different\r\n  value for the \"Letter\" size, for instance driver requires \"PS=LT;\"\r\n  instead of \"PageSize=Letter;\" as the jobInfo value, the PPD file has to\r\n  be defined as following;\r\n\r\n  *OpenUI *PageSize/Page Size: PickOne\r\n  *DefaultPageSize: A4\r\n  *PageSize A4/A4:\r\n  *pdftopdfJCLPageSize A4/A4: \"PS=A4;\"\r\n  *PageSize Letter/US Letter:\r\n  *pdftopdfJCLPageSize Letter/US Letter: \"PS=LT;\"\r\n  *CloseUI: *PageSize\r\n\r\n6.3 Special PDF comment\r\n\r\n\"pdftopdf\" outputs the following special comments from the 4th line in the\r\ncreated PDF data.\r\n\r\n%%PDFTOPDFNumCopies : <copies> --- <copies> specified Number of Copies\r\n%%PDFTOPDFCollate : <collate> --- <collate> is true or false\r\n\r\n6.4 Temporally files location\r\n\r\n\"pdftopdf\" creates temporally files if needed.　Temporary files are created\r\nin the location specified by TMPDIR environment　variable. Default location\r\nis \"/tmp\".\r\n\r\nPDFTOPDF  -- new implementation\r\n\r\nA new implementation of the pdftopdf filter is available. \r\nIt depends on libqpdf to read/write pdf files.\r\n\r\nThe aim is to replace and imitate the pstops filter in PDF-based workflows.\r\nA similar filter (which can serve as behavior reference) \r\nis called \"cgpdftopdf\" in OS X (not open source).\r\n\r\nNotable options\r\n---------------\r\n booklet=Off/On/Shuffle-Only\r\n   On also tries to set DuplexTumble (two-sided-short-edge) and forces number-up=2\r\n booklet-signature=(multiple of 4, or default: -1 to use \"all pages\")\r\n\r\nKnown issues\r\n------------\r\n- Borders, esp. in the \"number-up=1 fitplot=false\"-case are sometimes drawn \r\n  at incorrect locations.\r\n- more testing needs to be done\r\n- documentation largely missing\r\n\r\nTEXTTOPDF\r\n\r\nThis implements a texttopdf filter, and is derived from cups' texttops.\r\n\r\nTo configure:\r\n-------------\r\n\r\n- texttopdf uses CUPS_DATADIR/charset/pdf.utf-8 for font configuration\r\n  (when utf-8 was requested as charset). The font names given there are \r\n  used as fontconfig selectors; the best matching font, that is both \r\n  monospaced and in a supported format (TTC, TTF or OTF) will then be used.\r\n\r\n- As a special exception, all fontnames that start with a '.' or '/' are\r\n  considered filenames, and fontconfig is skipped; the name is used directly\r\n  for loading the font file.\r\n\r\n- Implementation note: TrueType Collections (.TTC) are internally handled\r\n  by appending '/' and the index of the font inside the collection to \r\n  the filename (e.g. to use the second font of uming.ttc, the filename \r\n  uming.ttc/1 must be given to the fontembed-library).\r\n  By appending the index-field returned from fontconfig, this is completely\r\n  transparent to the user (but currently not widely tested).\r\n\r\n- You may look at the two examples: pdf.utf-8.simple and pdf.utf-8.heavy.\r\n\r\nTo use:\r\n-------\r\n\r\nThe filter is called just like any other cups filter. Have a\r\nlook at test.sh for example. \r\n\r\nKnown Issues\r\n------------\r\n\r\n - Text extraction does not work (at least for pdftotext from xpdf)\r\n   for the resulting pdfs.\r\n\r\n - OTF(CFF) embedding currently does not subset the fonts.\r\n\r\n - Text wrapping in pretty-printing mode does not respect double-wide\r\n   characters (CJK), and thus produce wrong results (wrap too late)\r\n   for lines where they occur.  The fix is not trivial, since all the\r\n   pretty-printing processing is done without knowledge of / prior to\r\n   the font configuration (which is where single or double width\r\n   code-ranges are specified).\r\n\r\n - The hebrew example in test5.pdf shows one of our limitations:\r\n   Compose glyphs are not composed with the primary glyph but printed\r\n   as separate glyphs.\r\n\r\nFurther Infos\r\n-------------\r\n\r\nFont embedding is handled by libfontembed in the filter/fontembed\r\nsubdirectory.\r\n\r\nPlease report all bugs to https://bugs.linuxfoundation.org/, product\r\n\"OpenPrinting\", component \"cups-filters\".\r\n\r\n\r\nPDFTORASTER\r\n\r\n1. INTRODUCTION\r\n\r\n\"pdftoraster\" is a filter for CUPS. It reads PDF files, convert it and\r\noutput CUPS raster.\r\n\r\n\"pdftoraster\" does not support functions that are not related to printing\r\nfeatures, including interactive features and document interchange features.\r\nMany of these operators and sections are just ignored.\r\nSome of these may be output, but those functions are not assured.\r\nEncryption feature is not supported.\r\n\r\n2. LICENSE\r\n\r\nAlmost source files are under MIT like license. However, \"pdftoraster\" links\r\nsome \"poppler\" libraries, and these files are under GNU public license.\r\nSee copyright notice of each file for details.\r\n\r\n3. COMMAND LINE\r\n\r\n\"pdftoraster\" is a CUPS filter, and the command line arguments, environment\r\nvariables and configuration files are in accordance with the CUPS filter\r\ninterface.\r\n\r\npdftoraster <job> <user> <title> <num-copies> <options> [<filename>]\r\n\r\n\"pdftoraster\" ignores <job> and <user>.\r\n<title> is appended into the PDF dictionary as /Title.\r\n<num-copies> specifies the number of document copies.\r\n<options> is a CUPS option list.\r\n<filename> is an input PDF file name.\r\n\r\nWhen omit the <filename>, \"pdftoraster\" reads a PDF file from the stdin,\r\nand save it as a temporary file.\r\n\r\n4. ENVIRONMENT VARIABLES\r\n\r\nThis program refers the following environment variable;\r\n   PPD:  PPD file name of the printer.\r\n\r\n5. COMMAND OPTIONS\r\n\r\nSee CUPS documents for details.\r\n\r\n6. INFORMATION FOR DEVELOPERS\r\n\r\nFollowing information is for developers, not for driver users.\r\n\r\n6.1 Options handled by a printer or \"pdftoraster\"\r\n\r\n\"pdftopdf\" outputs the following special comments from the 4th line in the\r\ncreated PDF data.\r\n\r\n%%PDFTOPDFNumCopies : <copies> --- <copies> specified Number of Copies\r\n%%PDFTOPDFCollate : <collate> --- <collate> is true or false\r\n\r\n\"pdftoraster\" overrides the command line options by above two option's values.\r\n \r\n6.2 Temporally files location\r\n\r\n\"pdftoraster\" creates temporally files if needed. Temporary files are created\r\nin the location specified by TMPDIR environment variable. Default location\r\nis \"/tmp\".\r\n\r\n\r\nPDFTOIJS\r\n\r\n1. INTRODUCTION\r\n\r\n\"pdftoijs\" is a filter for CUPS. It reads PDF files, converts it\r\nand sends it to an IJS server.\r\n\r\n2. LICENSE\r\n\r\nAlmost source files are under MIT like license. However, \"pdftoijs\" links\r\nsome \"poppler\" libraries, and these files are under GNU public license.\r\nSee copyright notice of each file for details.\r\n\r\n3. COMMAND LINE\r\n\r\n\"pdftoijs\" is a CUPS filter, and the command line arguments, environment\r\nvariables and configuration files are in accordance with the CUPS filter\r\ninterface.\r\n\r\npdftoijs <job> <user> <title> <num-copies> <options> [<filename>]\r\n\r\n\"pdftoijs\" ignores <job> and <user>.\r\n<title> is appended into the PDF dictionary as /Title.\r\n<num-copies> specifies the number of document copies.\r\n<options> is a CUPS option list.\r\n<filename> is an input PDF file name.\r\n\r\nWhen omit the <filename>, \"pdftoijs\" reads a PDF file from the stdin,\r\nand save it as a temporary file.\r\n\r\n4. ENVIRONMENT VARIABLES\r\n\r\nThis program refers the following environment variable;\r\n   PPD:  PPD file name of the printer.\r\n\r\n5. NEW PPD KEYWORDS\r\n\r\n*ijsServer : the ijsserver executable\r\n*ijsManufacturer, *ijsModel : as used by the ijs server\r\n*ijsColorspace : the desired output colorspace, one of\r\n                 'rgb'\r\n                 'cmyk' (availability depending on poppler compile-options)\r\n                 'white1', 'black1':  1-bit normal/inverted\r\n                 'white8', 'black8':  8-bit greyscale normal/inverted\r\n*ijsResolution [option]=[choice]: the desired output resolution e.g. \"600 600\"\r\n*ijsParams [option]=[choice]: custom ijs parameters, separated by ','\r\n                 (to escape: use \\,)\r\n\r\n6. COMMAND OPTIONS\r\n\r\n(See CUPS documents for details.)\r\n\r\nijsOutputFile : the destination file, stdout otherwise\r\n\r\n7. INFORMATION FOR DEVELOPERS\r\n\r\nFollowing information is for developers, not for driver users.\r\n\r\n7.1 Temporally files location\r\n\r\n\"pdftoijs\" creates temporally files if needed. Temporary files are created\r\nin the location specified by TMPDIR environment variable. Default location\r\nis \"/tmp\".\r\n\r\n\r\nPDFTOOPVP\r\n\r\n1. INTRODUCTION\r\n\r\n\"pdftoopvp\" is a CUPS filter which reads PDF file, renders pages and\r\noutputs PDL to a printer driver which is compliant with the OpenPrinting\r\nVector Printer Driver Interface \"opvp\".\r\n\r\n2. CONFIGURATION\r\n\r\n\"pdftoopvp\" refers the poppler configuration file. Be aware that poppler\r\nuses \"fontconfig\" for its font configuration.\r\n\r\n3. JCL\r\n\r\nWhen \"pdftoopvp\" reads a PDF file from stdin, \"pdftoopvp\" handles the data\r\nprior to PDF header (%PDF ...) as JCL options. JCL options for \"pdftoopvp\"\r\nmust begin with \"pdftoopvp jobInfo:\". \"pdftoopvp\" passes the option string\r\njust after \":\" to the driver as the jobInfo option.\r\n\r\n4. COMMAND LINE\r\n\r\n\"pdftoopvp\" is a CUPS filter, and the command line arguments,\r\nenvironment variables and configuration files are in accordance with\r\nthe CUPS filter interface.\r\n\r\npdftoopvp <job> <user> <title> <num-copies> <options> [<filename>]\r\n\r\n\"pdftoopvp\" ignores <job>, <user>, <title> and <num-copies>.\r\n<options> is a CUPS option list.\r\n\r\nWhen omit the <filename>, \"pdftoopvp\" reads a PDF file from stdin,\r\nand save it as a temporary file.\r\n\r\nCUPS options defined in <options> are delimited by space. Boolean\r\ntype CUPS option is defined only by the option key, and other type\r\nCUPS option are defined by pairs of key and value, <key>=<value>.\r\n\r\n5. COMMAND OPTIONS\r\n\r\n\"pdftoopvp\" accepts the following CUPS standard options;\r\n\r\nResolution=<int>\r\n  Specifies a printer resolution in dpi.\r\n  When this option is omitted, the resolution is treated as 300dpi.\r\n  Horizontal and vertical resolution are treated as the same resolution.\r\n\r\nPageSize=<string>\r\n  Specifies a paper size by name defined in the PPD file.\r\n  This option is ignored when no PPD file is assigned for the printer\r\n  queue.\r\n\r\n\"pdftoopvp\" accepts the following original options;\r\n\r\nopvpDriver=<string>\r\n  Specifies a driver library name.\r\n\r\nopvpModel=<string>\r\n  Specifies a printer model name.\r\n\r\nopvpJobInfo=<string>\r\n  Specifies \"jobInfo\" printing options that are passed to the driver.\r\n  Printing options are overridden by JCL options.\r\n\r\nopvpDocInfo=<string>\r\n  Specifies \"docInfo\" document options that are passed to the driver.\r\n\r\nopvpPageInfo=<string>\r\n  Specifies \"pageInfo\" page options that are passed to the driver.\r\n\r\npdftoopvpClipPathNotSaved (Boolean option)\r\n  Specifies that the driver cannot save clipping path operators in PDF.\r\n\r\nnopdftoopvpShearImage (Boolean option)\r\n  Specifies that the driver cannot rotate/shear images by CTM.\r\n\r\nnopdftoopvpMiterLimit (Boolean option)\r\n  Specifies that the driver does not support miter limit.\r\n  If the driver does not prepare the opvpSetMiterLimit function entry,\r\n  this option setting is ignored, and also miter limit is ignored.\r\n\r\npdftoopvpIgnoreMiterLimit (Boolean option)\r\n  When nopdftoopvpMiterLimit option is set, pdftoopvp automatically\r\n  replace paths to multiple lines or drawing images. This option\r\n  specifies to avoid the path replacement even when nopdftoopvpMiterLimit\r\n  option is set.\r\n\r\npdftoopvpMaxClipPathLength=<int>\r\n  Specifies the maximum number of clipping path points that the driver\r\n  supports. Default value is 2000 points.\r\n\r\npdftoopvpMaxFillPathLength=<int>\r\n  Specifies the maximum number of fill path points that the driver supports.\r\n  Default value is 4000 points.\r\n\r\nnopdftoopvpLineStyle (Boolean option)\r\n  Specifies that the driver ignores the line style settings in PDF.\r\n  If the driver does not prepare the SetLineStyle , SetLineDash or\r\n  SetLineDashOffset function entry, this option setting is ignored, and\r\n  also line style, line dash and line dash offset are ignored.\r\n\r\nnopdftoopvpClipPath (Boolean option)\r\n  Specifies that the driver does not support clipping path.\r\n  If the driver does not prepare the opvpSetClipPath function entry, this\r\n  option is ignored, and also clip path setting is ignored.\r\n\r\nnopdftoopvpBitmapChar (Boolean option)\r\n  Specifies that the driver does not output characters as images.\r\n  Default setting is that \"pdftoopvp\" outputs small characters as images.\r\n\r\npdftoopvpBitmapCharThreshold=<int>\r\n  Specifies the threshold value that \"pdftoopvp\" outputs characters as\r\n  images. Threshold value is defined as W x H where character's width\r\n  is given by W pixels and height is given by H pixels.\r\n  Default threshold value is 2000 points.\r\n\r\nnopdftoopvpImageMask (Boolean option)\r\n  Specifies that the driver does not support image mask.\r\n  If this option is set, \"pdftoopvp\" treats as the nopdftoopvpBitmapChar\r\n  option is given.\r\n\r\n6. PPD OPTIONS\r\n\r\nFollowing options can be defined in a PPD.\r\n\r\nResolution=<int>\r\nPageSize=<string>\r\nopvpDriver=<string>\r\nopvpModel=<string>\r\nopvpJobInfo=<string>\r\nopvpDocInfo=<string>\r\nopvpPageInfo=<string>\r\npdftoopvpClipPathNotSaved=True\r\npdftoopvpShearImage=False\r\npdftoopvpMiterLimit=False\r\npdftoopvpIgnoreMiterLimit=True\r\npdftoopvpMaxClipPathLength=<int>\r\npdftoopvpMaxFillPathLength=<int>\r\npdftoopvpLineStyle=False\r\npdftoopvpClipPath=False\r\npdftoopvpBitmapChar=False\r\npdftoopvpBitmapCharThreshold=<int>\r\npdftoopvpImageMask=False\r\n\r\n7. OPTIONS OVERRIDING RULE\r\n\r\n\"jobInfo\" printing options in a PPD is used as a initial \"jobInfo\" printing\r\noptions. If opvpJobInfo option is given in the command line, precedent\r\n\"jobInfo\" printing options are overridden by the opvpJobInfo options.\r\n\r\nAfter the \"jobInfo\" printing options are overridden by the opvpJobInfo\r\noptions, if JCL options are given, precedent \"jobInfo\" printing options are\r\noverridden by the options given by JCL options.\r\n\r\n8. INFORMATION FOR CUPS 1.1\r\n\r\nTo use this program under CUPS 1.1, following lines must be defined\r\nin the CUPS's \"mime.types\" file.\r\n\r\napplication/vnd.cups-pdf\r\n\r\n9. KNOWN PROBLEMS\r\n\r\nProblem:\r\n  When a page is rotated and a character is small, character might not be\r\n  rotated correctly. This problem is caused by free type library.\r\nSolution:\r\n  Define the nopdftoopvpBitmapChar to inhibit characters output as images.\r\n\r\n\r\nURFTOPDF\r\n\r\n\"urftopdf\" is a filter to convert Apple's proprietary URF raster\r\nformat into PDF. URF raster is generated by some iOS applications when\r\nprinting via Airprint, so this filter provides a more complete support\r\nfor AirPrint clients. Note that it is not clear whether nowadays all\r\niOS applications send PDF and not URF any more. Also the filter does\r\nnot support all variants of URF format so the URF support is most\r\nprobably incomplete.\r\n\r\nApple does not provide any official documentation of the format but there is\r\nalready some reverse engineering done. A description of the format as far as it\r\ngot found out and two sample files can be found here:\r\n\r\nhttps://github.com/AlanQuatermain/unirast\r\n\r\nAn actual implementation of an urftopdf filter is here:\r\n\r\nhttps://github.com/superna9999/urftopdf\r\n\r\nThis original version uses libharu and to avoid an extra dependency\r\nthe filter coming with this package is converted to use libqpdf\r\ninstead (the same library as pdftopdf uses).\r\n\r\nLicense: GNU General Public License version 3 or any newer version\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}